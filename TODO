05-21-2017:

Externalize the configuration for the openmeetings login username and password

Create an EmailService implementation that uses Amazon SES instead of a direct SMTP
connection. That will be better for demo use, given how quirky Google's SMTP servers
are.

Create a way to turn certain internal errors into user notifications.  That is, things
they would want to know, but that don't otherwise prevent the current operation from 
continuing (failing to send an email for example)

OLDER:


make sure the "pending messages" count is right... it's kinda dodgy right now
 (basically this means we need to refresh it immediately when that link is clicked)


Actually figure out the relationship between the "activity stream" (or "news feed") and 
the various KINDS of events... a status update is ONE kind of event, but it's not the ONLY
thing that can show up, right?

Corollary to above: don't have two places to submit status updates... Duh huh...


add drop-down to search bar to toggle the "what": people, groups, contents, etc.

Start fixing up the "user add" stuff

Add notifications area thing like G+, maybe using one of those "Growl for JQuery" libs or whatever

Implement unregistering event queue on logout

Add checks for valid session everywhere

add redirect to default page on session expiration

Figure out how to re-integrate the Shingdig (and/or Rave) stuff, without actually embedding their code
into the Grails project...

Don't display "add to friends" link when user is already your friend
 -- same for "follow" link
 
 Add ability to view a specific user's feed ("wall", whatever) with an "about" link
 that displays their profile, etc.

Don't display that "edit profile" link unless a user is logged in.

Don't display most of that top menu bar stuff, unless a user is logged in. 



# Only push messages onto queues based on relationships - DONE


# Don't show "get more events" link unless there is a user logged in. - DONE

# in the activity stream, display the picture of the user who posted the activity - DONE

# Fix relative path problems for images when you're on under home controller ("/") - DONE

# Don't push update onto user's own queue - DONE

# set creator for Activity objects built from messages received on the queue - DONE

# Get sorting of activityStream entries right - DONE

# Get paging of activityStream entries right - DONE

# Don't display user's own updates in activityStream - DONE

# Start actually selecting activityStream entries based on relationship(s) - DONE

Note: for bug details see: http://dev.fogbeam.org/bugzilla/index.cgi


Implement minimal profiles (bug #40)

Implement Groups (user associations) (bug #41)

Build first cut of the Admin console (bug #43) 

Build first cut of the "installer" module (bug #42)

Get rid of all the hard-coded strings in the new LDAP code (base DN crap, etc.)

Deal with failure to connect to LDAP on startup

Put in an OpenSessionInView filter, so we can use domain classes that do lazy loading in the view layer

Deal with JMS reconnect / failed connect stuff

---

Put profile fields into Lucene index

push notice to activity stream when profile changes are made?

Sort out the beginnings of the messaging stuff for dealing with events, activity stream, etc.
 (have to deal with federation issues, so we can receive events from Neddick and other 3rd
 party sources as well)
 
Investigate using FlockDB for the social-graph stuff

Implement access control / authorization (using Shiro?)

User-to-user messaging?  Is there really a need for a "lightweight" messaging system, or should we
just layer on top of existing (email?) infrastructure?  

---
Move beyond naive Shindig integration: tie into our backend services for social-graph, etc.

Make a screencast illustrating basic usage.

Post some more screenshots to the blog.

# Start to spiffy up the UI with AJAXy goodness, and rework the design to be a little cleaner.
# This is started and well underway






